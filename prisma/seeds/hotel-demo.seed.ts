import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function seedHotelDemo() {
  console.log('üè® –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ-–æ—Ç–µ–ª—å —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...');

  try {
    // 1. –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫
    const language = await prisma.language.findFirst({
      where: { code: 'en' },
    });
    
    if (!language) {
      throw new Error(
        '–Ø–∑—ã–∫ English –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–µ seeds.',
      );
    }

    const demoUser = await prisma.user.upsert({
      where: { normalizedEmail: 'DEMO@HOTEL.COM' },
      update: {},
      create: {
        userName: 'demohotel',
        normalizedUserName: 'DEMOHOTEL',
        email: 'demo@hotel.com',
        normalizedEmail: 'DEMO@HOTEL.COM',
        emailConfirmed: true,
        passwordHash: '$2a$10$abcdefghijklmnopqrstuvwxyz123456789', // demo password hash
        defaultLanguageId: language.id,
      },
    });

    // 2. –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ –æ—Ç–µ–ª—å
    console.log('üè® –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ –æ—Ç–µ–ª—å...');
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    const country = await prisma.country.findFirst({
      where: { code: 'AM' },
    });
    const currency = await prisma.currency.findFirst({
      where: { code: 'AMD' },
    });

    if (!country || !currency) {
      throw new Error(
        '–°—Ç—Ä–∞–Ω–∞ –∏–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–µ seeds.',
      );
    }

    const demoHotel = await prisma.hotel.upsert({
      where: { id: 9999 }, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è –¥–µ–º–æ
      update: {},
      create: {
        id: 9999,
        name: 'Grand Demo Hotel',
        contactPerson: 'John Doe',
        phoneCode: 374,
        phoneNumber: '77123456',
        logoUrl: 'https://example.com/logo.png',
        websiteUrl: 'https://granddemo.hotel',
        countryId: country.id,
        state: 'Yerevan',
        city: 'Yerevan',
        registerCountryId: country.id,
        registerState: 'Yerevan',
        registerCity: 'Yerevan',
        tinNumber: '01234567',
        director: 'John Doe',
        bankName: 'Demo Bank',
        bankAccountNumber: '123456789',
        bankPhoneCode: 374,
        bankPhoneNumber: '10123456',
        currencyId: currency.id,
        legalPerson: 'Grand Demo Hotel LLC',
        priceSendEmail: 'prices@granddemo.hotel',
      },
    });

    // 3. –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–µ–ª–µ–º
    await prisma.userHotel.upsert({
      where: {
        userId_hotelId: {
          userId: demoUser.id,
          hotelId: demoHotel.id,
        },
      },
      update: {},
      create: {
        userId: demoUser.id,
        hotelId: demoHotel.id,
      },
    });

    // 4. –°–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É —Å —Ç–∏–ø–∞–º–∏
    console.log('üõèÔ∏è –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ –∫–æ–º–Ω–∞—Ç—É...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –∏ –≤–∏–¥ –∫–æ–º–Ω–∞—Ç—ã
    const roomClass = await prisma.roomClass.findFirst({
      where: { name: 'Standard' },
    });
    const roomView = await prisma.roomView.findFirst();

    if (!roomClass) {
      throw new Error(
        '–ö–ª–∞—Å—Å –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–µ seeds.',
      );
    }

    const demoRoom = await prisma.hotelRoom.upsert({
      where: { id: 9999 },
      update: {},
      create: {
        id: 9999,
        name: 'Demo Standard Room',
        hotelId: demoHotel.id,
        roomClassId: roomClass.id,
        roomViewId: roomView?.id,
        numbers: '101,102,103',
        area: '25',
        mainGuestQuantity: 2,
        additionalGuestQuantity: 1,
        status: 'Active',
        roomNumberQuantity: 3,
        completeness: 'Completed',
      },
    });

    // 5. –°–æ–∑–¥–∞—ë–º —á–∞—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å –∫—Ä–æ–≤–∞—Ç—è–º–∏
    console.log('üè† –°–æ–∑–¥–∞—ë–º —á–∞—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã –∏ –∫—Ä–æ–≤–∞—Ç–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã
    const roomParts = await prisma.roomPart.findMany({
      where: {
        name: { in: ['Bedroom', 'Bathroom'] },
      },
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∏ —Ä–∞–∑–º–µ—Ä—ã –∫—Ä–æ–≤–∞—Ç–µ–π
    const bedType = await prisma.roomBedType.findFirst({
      where: { name: 'Double' },
    });
    const bedSize = await prisma.roomBedSize.findFirst({
      where: { size: '140' },
    });

    if (!bedType || !bedSize) {
      throw new Error(
        '–¢–∏–ø –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –∫—Ä–æ–≤–∞—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–µ seeds.',
      );
    }

    for (const roomPart of roomParts) {
      // –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å –∫–æ–º–Ω–∞—Ç–∞-—á–∞—Å—Ç—å
      const hotelRoomPart = await prisma.hotelRoomPart.create({
        data: {
          hotelRoomId: demoRoom.id,
          roomPartId: roomPart.id,
        },
      });

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∞–ª—å–Ω—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫—Ä–æ–≤–∞—Ç—å
      if (roomPart.name === 'Bedroom') {
        await prisma.hotelRoomPartBed.create({
          data: {
            hotelRoomPartId: hotelRoomPart.id,
            bedType: 'Main',
            roomBedSizeId: bedSize.id,
            roomBedTypeId: bedType.id,
            quantity: 1,
          },
        });
      }
    }

    // 6. –°–æ–∑–¥–∞—ë–º cuisines –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å –æ—Ç–µ–ª–µ–º
    console.log('üçΩÔ∏è –°–æ–∑–¥–∞—ë–º –±–ª—é–¥–∞ –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –∫—É—Ö–Ω–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ö–Ω–∏
    const cuisines = await prisma.cuisine.findMany({
      where: {
        name: { in: ['Italian', 'Armenian', 'European'] },
      },
    });

    if (cuisines.length === 0) {
      throw new Error('–ö—É—Ö–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–µ seeds.');
    }

    // –°–æ–∑–¥–∞—ë–º –±–ª—é–¥–æ –æ—Ç–µ–ª—è
    const hotelFood = await prisma.hotelFood.create({
      data: {
        hotelId: demoHotel.id,
        name: 'Demo Breakfast Package',
        description: 'Continental breakfast with local specialties',
        foodType: 'Breakfast',
        statusId: 'Completed',
        startDate: new Date('2025-01-01'),
        endDate: new Date('2025-12-31'),
      },
    });

    // –°–≤—è–∑—ã–≤–∞–µ–º –±–ª—é–¥–æ —Å –∫—É—Ö–Ω—è–º–∏
    for (const cuisine of cuisines) {
      await prisma.hotelFoodCuisine.upsert({
        where: {
          hotelFoodId_cuisineId: {
            hotelFoodId: hotelFood.id,
            cuisineId: cuisine.id,
          },
        },
        update: {},
        create: {
          hotelFoodId: hotelFood.id,
          cuisineId: cuisine.id,
        },
      });
    }

    // 7. –°–æ–∑–¥–∞—ë–º hotel availability
    console.log('üìÖ –°–æ–∑–¥–∞—ë–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Ç–µ–ª—è...');
    
    const hotelAvailability = await prisma.hotelAvailability.create({
      data: {
        hotelId: demoHotel.id,
        dateFrom: new Date('2025-01-01'),
        dateTo: new Date('2025-12-31'),
      },
    });

    // –°–æ–∑–¥–∞—ë–º —Ü–µ–Ω—ã –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    await prisma.hotelRoomPrice.create({
      data: {
        hotelRoomId: demoRoom.id,
        price: 50000, // 50,000 AMD
        dateFrom: new Date('2025-01-01'),
        dateTo: new Date('2025-12-31'),
      },
    });

    // –°–æ–∑–¥–∞—ë–º —Ü–µ–Ω—ã –¥–ª—è –µ–¥—ã
    await prisma.hotelFoodPrice.create({
      data: {
        hotelFoodId: hotelFood.id,
        price: 5000, // 5,000 AMD
        dateFrom: new Date('2025-01-01'),
        dateTo: new Date('2025-12-31'),
      },
    });

    // –°–æ–∑–¥–∞—ë–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const ageAssignments = [
      {
        hotelAvailabilityId: hotelAvailability.id,
        name: 'Adult',
        fromAge: 18,
        toAge: null,
        bedType: 'Main' as const,
        isAdditional: false,
      },
      {
        hotelAvailabilityId: hotelAvailability.id,
        name: 'Child',
        fromAge: 3,
        toAge: 17,
        bedType: 'Additional' as const,
        isAdditional: true,
      },
      {
        hotelAvailabilityId: hotelAvailability.id,
        name: 'Infant',
        fromAge: 0,
        toAge: 2,
        bedType: 'Cradle' as const,
        isAdditional: true,
      },
    ];

    for (const assignment of ageAssignments) {
      await prisma.hotelAgeAssignment.create({
        data: assignment,
      });
    }

    console.log('‚úÖ –î–µ–º–æ –æ—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('üìä –°–æ–∑–¥–∞–Ω–æ:');
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${demoUser.email}`);
    console.log(`   - –û—Ç–µ–ª—å: ${demoHotel.name} (ID: ${demoHotel.id})`);
    console.log(
      `   - –ö–æ–º–Ω–∞—Ç–∞: ${demoRoom.name} (${demoRoom.roomNumberQuantity} –Ω–æ–º–µ—Ä–æ–≤)`,
    );
    console.log(`   - –ß–∞—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã: ${roomParts.length}`);
    console.log(`   - –ö—Ä–æ–≤–∞—Ç–∏: 1 –¥–≤—É—Å–ø–∞–ª—å–Ω–∞—è`);
    console.log(`   - –ë–ª—é–¥–æ: ${hotelFood.name}`);
    console.log(`   - –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫—É—Ö–Ω–∏: ${cuisines.length}`);
    console.log(
      `   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${hotelAvailability.dateFrom.toDateString()} - ${hotelAvailability.dateTo.toDateString()}`,
    );
    console.log(`   - –¶–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã: ${50000} AMD/–Ω–æ—á—å`);
    console.log(`   - –¶–µ–Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞: ${5000} AMD/–ø–µ—Ä—Å–æ–Ω–∞`);
    console.log(`   - –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: 3`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ –æ—Ç–µ–ª—è:', error);
    throw error;
  }
}
